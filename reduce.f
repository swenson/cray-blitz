      subroutine reduce(packer)
crev last revision 04/26/89
c
c     ******************************************************************
c     *                                                                *
c     *      reduce is used to reduce the fully qualified move         *
c     *  generated by 'output' to the minimum notation required to     *
c     *  indicate a non-ambiguous move.  it tries several standard     *
c     *  short forms and uses subroutine 'test' to determine if the    *
c     *  shortened move is ambiguous.  for each ambiguous attempt,     *
c     *  additional information is added and 'test' tried again.       *
c     *  eventually a good short form will be found or the fully       *
c     *  qualified move will be used.                                  *
c     *                                                                *
c     ******************************************************************
c
      implicit integer (a-z)
      integer saver(30), satext(30)
c
c
      include 'global.f'
c
c
      include 'common.f'
c
c
      equivalence (blank,alpha(70)),(minus,alpha(64)),
     * (x,alpha(50))
c
c
c------------------------------< initialize
c
      t1=mto
      f1=mfrom
      t2=mtype
      p1=mpropc
      c1=mcappc
      m1=movgpc
      do 100 i=1,30
          satext(i)=atext(i)
          atext(i)=text(i)
          saver(i)=atext(i)
100   continue
c
c------------------------------< if the move is a capture, off to
c------------------------------< some different checks.
c
      if(mcappc .eq. 0) then
c
c------------------------------< *** c5 ***
c
          if(m1 .eq. 1) then
              atext(1)=blank
              atext(2)=blank
              atext(3)=blank
              atext(4)=blank
              call test(packer)
              if(return .eq. 0) go to 9999
          endif
c
c------------------------------< *** nc5 ***
c
          do 300 i=1,30
              atext(i)=saver(i)
300       continue
          atext(2)=blank
          atext(3)=blank
          atext(4)=blank
          call test(packer)
          if(return .eq. 0) go to 9999
c
c------------------------------< *** ndc5 ***
c
          do 400 i=1,30
              atext(i)=saver(i)
400       continue
          atext(3)=blank
          atext(4)=blank
          call test(packer)
          if(return .eq. 0) go to 9999
c
c------------------------------< *** n3c5 ***
c
          do 500 i=1,30
              atext(i)=saver(i)
500       continue
          atext(2)=blank
          atext(4)=blank
          call test(packer)
          if(return .eq. 0) go to 9999
c
c------------------------------< *** nxc7 ***
c
      else
          if(m1 .eq. 1) go to 900
          atext(2)=blank
          atext(3)=blank
          call test(packer)
          if(return .eq. 0) go to 9999
c
c------------------------------< *** ndxc7 ***
c
          do 700 i=1,30
              atext(i)=saver(i)
700       continue
          atext(3)=blank
          call test(packer)
          if(return .eq. 0) go to 9999
c
c------------------------------< *** n5xc7 ***
c
          do 800 i=1,30
              atext(i)=saver(i)
800       continue
          atext(2)=blank
          call test(packer)
          if(return .eq. 0) go to 9999
          go to 9998
c
c------------------------------< *** cxd7 ***
c
900   continue
          atext(1)=blank
          atext(3)=blank
          call test(packer)
          if(return .eq. 0) go to 9999
      endif
c
c------------------------------< it's still ambiguous, fully qualify
c------------------------------< it and give up on simplicity.
c
9998  continue
          do 1100 i=1,30
              atext(i)=saver(i)
1100      continue
          mto=t1
          mfrom=f1
          mpropc=p1
          mcappc=c1
          movgpc=m1
          mtype=t2
          do 1150 i=1,30
              atext(i)=satext(i)
1150      continue
          return
c
c------------------------------< simplification completed. return
c
9999  continue
          do 1200 i=1,30
              text(i)=atext(i)
1200      continue
          mto=t1
          mfrom=f1
          mpropc=p1
          mcappc=c1
          movgpc=m1
          mtype=t2
          do 1250 i=1,30
              atext(i)=satext(i)
1250      continue
          return
      end
